{"version":3,"sources":["webpack.config.js"],"names":["fs","require","isWsl","webpack","path","PnpWebpackPlugin","CaseSensitivePathsPlugin","resolve","TerserPlugin","OptimizeCSSAssetsPlugin","HtmlWebpackPlugin","ManifestPlugin","WorkboxWebpackPlugin","InlineChunkHtmlPlugin","ModuleScopePlugin","paths","MiniCssExtractPlugin","getClientEnvironment","ForkTsCheckerWebpackPlugin","safePostCssParser","getPackageJson","InterpolateHtmlPlugin","appPackageJson","shouldInlineRuntimeChunk","process","env","INLINE_RUNTIME_CHUNK","imageInlineSizeLimit","parseInt","modules","ModuleNotFoundPlugin","existsSync","appTsConfig","cssRegex","typescriptFormatter","sassRegex","version","name","license","repository","author","shouldUseSourceMap","url","replace","IMAGE_INLINE_SIZE_LIMIT","module","exports","webpackEnv","isEnvProduction","publicUrl","publicPath","loaders","getStyleLoaders","shouldUseRelativeAssetPaths","options","cssOptions","loader","ident","plugins","autoprefixer","stage","postcssNormalize","sourceMap","filter","Boolean","preProcessor","push","isEnvDevelopment","banner","servedPath","slice","bail","devtool","entry","appLibIndexJs","appIndexJs","futureEmitAssets","output","appBuild","undefined","umdNamedDefine","devtoolModuleFilenameTemplate","chunkFilename","optimization","minimize","minimizer","parse","info","relative","appSrcLib","absoluteResourcePath","ecma","concat","comparisons","terserOptions","safari10","keep_fnames","warnings","inline","mangle","parallel","keep_classnames","entryOnly","ascii_only","cache","BannerPlugin","splitChunks","cssProcessorOptions","parser","map","annotation","extensions","cacheGroups","default","useTypeScript","runtimeChunk","appNodeModules","additionalModulePaths","moduleFileExtensions","strictExportPresence","rules","ext","includes","alias","react-native","enforce","appSrc","include","moduleLoader","test","limit","customize","loaderMap","__dirname","oneOf","exclude","babelrc","configFile","cacheDirectory","cacheCompression","svg","ReactComponent","compact","importLoaders","getLocalIdent","presets","sideEffects","cssModuleRegex","use","Object","appHtml","useShortDoctype","removeEmptyAttributes","removeStyleLinkTypeAttributes","keepClosingSlash","sassModuleRegex","DefinePlugin","getCSSModuleLocalIdent","ProvidePlugin","assign","inject","template","minify","removeComments","collapseWhitespace","removeRedundantAttributes","minifyCSS","resolveModuleNameModule","silent","formatter","dns","raw","net","appPath","performance","stringified","HotModuleReplacementPlugin","WatchMissingNodeModulesPlugin","filename","IgnorePlugin","typescript","sync","basedir","async","useTypescriptIncrementalApi","checkSyntacticErrors","versions","pnp","resolveTypeReferenceDirectiveModule","tsconfig","reportFiles","watch","node","dgram","http2","tls","child_process"],"mappings":"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","file":"webpack.config.min.js","sourcesContent":["'use strict';\r\n\r\nconst fs = require('fs');\r\nconst isWsl = require('is-wsl');\r\nconst path = require('path');\r\nconst webpack = require('webpack');\r\nconst resolve = require('resolve');\r\nconst PnpWebpackPlugin = require('pnp-webpack-plugin');\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\nconst CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');\r\nconst InlineChunkHtmlPlugin = require('react-dev-utils/InlineChunkHtmlPlugin');\r\nconst TerserPlugin = require('terser-webpack-plugin');\r\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\r\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');\r\nconst safePostCssParser = require('postcss-safe-parser');\r\nconst ManifestPlugin = require('webpack-manifest-plugin');\r\nconst InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin');\r\nconst WorkboxWebpackPlugin = require('workbox-webpack-plugin');\r\nconst WatchMissingNodeModulesPlugin = require('react-dev-utils/WatchMissingNodeModulesPlugin');\r\nconst ModuleScopePlugin = require('react-dev-utils/ModuleScopePlugin');\r\nconst getCSSModuleLocalIdent = require('react-dev-utils/getCSSModuleLocalIdent');\r\nconst paths = require('./paths');\r\nconst modules = require('./modules');\r\nconst getClientEnvironment = require('./env');\r\nconst ModuleNotFoundPlugin = require('react-dev-utils/ModuleNotFoundPlugin');\r\nconst ForkTsCheckerWebpackPlugin = require('react-dev-utils/ForkTsCheckerWebpackPlugin');\r\nconst typescriptFormatter = require('react-dev-utils/typescriptFormatter');\r\nconst getPackageJson = require('./getPackageJson');\r\nconst eslint = require('eslint');\r\n\r\nconst postcssNormalize = require('postcss-normalize');\r\n\r\nconst appPackageJson = require(paths.appPackageJson);\r\n\r\n// Source maps are resource heavy and can cause out of memory issue for large source files.\r\n// const shouldUseSourceMap = process.env.GENERATE_SOURCEMAP !== 'false';\r\nconst shouldUseSourceMap = false;\r\n// Some apps do not need the benefits of saving a web request, so not inlining the chunk\r\n// makes for a smoother build process.\r\nconst shouldInlineRuntimeChunk = process.env.INLINE_RUNTIME_CHUNK !== 'false';\r\n\r\nconst imageInlineSizeLimit = parseInt(\r\n  process.env.IMAGE_INLINE_SIZE_LIMIT || '10000'\r\n);\r\n\r\n// Check if TypeScript is setup\r\nconst useTypeScript = fs.existsSync(paths.appTsConfig);\r\n\r\n// style files regexes\r\nconst cssRegex = /\\.css$/;\r\nconst cssModuleRegex = /\\.module\\.css$/;\r\nconst sassRegex = /\\.(scss|sass)$/;\r\nconst sassModuleRegex = /\\.module\\.(scss|sass)$/;\r\n\r\nconst {\r\n  version,\r\n  name,\r\n  license,\r\n  repository,\r\n  author,\r\n} = getPackageJson('version', 'name', 'license', 'repository', 'author');\r\n\r\nconst banner = `\r\n  ${name} v${version}\r\n  ${repository.url}\r\n\r\n  Copyright (c) ${author.replace(/ *\\<[^)]*\\> */g, \" \")}\r\n\r\n  This source code is licensed under the ${license} license found in the\r\n  LICENSE file in the root directory of this source tree.\r\n  `;\r\n\r\n// This is the production and development configuration.\r\n// It is focused on developer experience, fast rebuilds, and a minimal bundle.\r\nmodule.exports = function(webpackEnv) {\r\n  const isEnvDevelopment = webpackEnv === 'development';\r\n  const isEnvProduction = webpackEnv === 'production';\r\n\r\n  // Webpack uses `publicPath` to determine where the app is being served from.\r\n  // It requires a trailing slash, or the file assets will get an incorrect path.\r\n  // In development, we always serve from the root. This makes config easier.\r\n  const publicPath = isEnvProduction\r\n    ? paths.servedPath\r\n    : isEnvDevelopment && '/';\r\n  // Some apps do not use client-side routing with pushState.\r\n  // For these, \"homepage\" can be set to \".\" to enable relative asset paths.\r\n  const shouldUseRelativeAssetPaths = publicPath === './';\r\n\r\n  // `publicUrl` is just like `publicPath`, but we will provide it to our app\r\n  // as %PUBLIC_URL% in `index.html` and `process.env.PUBLIC_URL` in JavaScript.\r\n  // Omit trailing slash as %PUBLIC_URL%/xyz looks better than %PUBLIC_URL%xyz.\r\n  const publicUrl = isEnvProduction\r\n    ? publicPath.slice(0, -1)\r\n    : isEnvDevelopment && '';\r\n  // Get environment variables to inject into our app.\r\n  const env = getClientEnvironment(publicUrl);\r\n\r\n  // common function to get style loaders\r\n  const getStyleLoaders = (cssOptions, preProcessor) => {\r\n    const loaders = [\r\n      isEnvDevelopment && require.resolve('style-loader'),\r\n      isEnvProduction && {\r\n        loader: MiniCssExtractPlugin.loader,\r\n        options: shouldUseRelativeAssetPaths ? { publicPath: '../../' } : {},\r\n      },\r\n      {\r\n        loader: require.resolve('css-loader'),\r\n        options: cssOptions,\r\n      },\r\n      {\r\n        // Options for PostCSS as we reference these options twice\r\n        // Adds vendor prefixing based on your specified browser support in\r\n        // package.json\r\n        loader: require.resolve('postcss-loader'),\r\n        options: {\r\n          // Necessary for external CSS imports to work\r\n          // https://github.com/facebook/create-react-app/issues/2677\r\n          ident: 'postcss',\r\n          plugins: () => [\r\n            require('postcss-flexbugs-fixes'),\r\n            require('postcss-preset-env')({\r\n              autoprefixer: {\r\n                flexbox: 'no-2009',\r\n              },\r\n              stage: 3,\r\n            }),\r\n            // Adds PostCSS Normalize as the reset css with default options,\r\n            // so that it honors browserslist config in package.json\r\n            // which in turn let's users customize the target behavior as per their needs.\r\n            postcssNormalize(),\r\n          ],\r\n          sourceMap: isEnvProduction && shouldUseSourceMap,\r\n        },\r\n      },\r\n    ].filter(Boolean);\r\n    if (preProcessor) {\r\n      loaders.push(\r\n        {\r\n          loader: require.resolve('resolve-url-loader'),\r\n        options: {\r\n          sourceMap: isEnvProduction && shouldUseSourceMap,\r\n        },\r\n        },\r\n        {\r\n          loader: require.resolve(preProcessor),\r\n          options: {\r\n            sourceMap: true,\r\n          },\r\n    }\r\n      );\r\n    }\r\n    return loaders;\r\n  };\r\n\r\n  return {\r\n    mode: isEnvProduction ? 'production' : isEnvDevelopment && 'development',\r\n    // Stop compilation early in production\r\n    bail: isEnvProduction,\r\n    devtool: isEnvProduction\r\n      ? shouldUseSourceMap\r\n        ? 'source-map'\r\n        : false\r\n      : isEnvDevelopment && 'cheap-module-source-map',\r\n    // These are the \"entry points\" to our application.\r\n    // This means they will be the \"root\" imports that are included in JS bundle.\r\n    entry: isEnvProduction ? [paths.appLibIndexJs] : [\r\n      // Include an alternative client for WebpackDevServer. A client's job is to\r\n      // connect to WebpackDevServer by a socket and get notified about changes.\r\n      // When you save a file, the client will either apply hot updates (in case\r\n      // of CSS changes), or refresh the page (in case of JS changes). When you\r\n      // make a syntax error, this client will display a syntax error overlay.\r\n      // Note: instead of the default WebpackDevServer client, we use a custom one\r\n      // to bring better experience for Create React App users. You can replace\r\n      // the line below with these two lines if you prefer the stock client:\r\n      // require.resolve('webpack-dev-server/client') + '?/',\r\n      // require.resolve('webpack/hot/dev-server'),\r\n      isEnvDevelopment &&\r\n        require.resolve('react-dev-utils/webpackHotDevClient'),\r\n      // Finally, this is your app's code:\r\n      paths.appIndexJs,\r\n      // We include the app code last so that if there is a runtime error during\r\n      // initialization, it doesn't blow up the WebpackDevServer client, and\r\n      // changing JS code would still trigger a refresh.\r\n    ].filter(Boolean),\r\n    output: {\r\n      // The build folder.\r\n      path: isEnvProduction ? paths.appBuild : undefined,\r\n      // Add /* filename */ comments to generated require()s in the output.\r\n      pathinfo: isEnvDevelopment,\r\n      // There will be one main bundle, and one file per asynchronous chunk.\r\n      // In development, it does not produce real files.\r\n      filename: isEnvProduction\r\n        ? 'index.js'\r\n        : isEnvDevelopment && 'static/js/bundle.js',\r\n      // TODO: remove this when upgrading to webpack 5\r\n      futureEmitAssets: true,\r\n      // There are also additional JS chunk files if you use code splitting.\r\n      chunkFilename: isEnvProduction\r\n        ? 'static/js/[name].[contenthash:8].chunk.js'\r\n        : isEnvDevelopment && 'static/js/[name].chunk.js',\r\n      // We inferred the \"public path\" (such as / or /my-project) from homepage.\r\n      // We use \"/\" in development.\r\n      publicPath: publicPath,\r\n      library: \"TfaChart\",\r\n      libraryTarget: 'umd',\r\n      umdNamedDefine: true,\r\n      // Point sourcemap entries to original disk location (format as URL on Windows)\r\n      devtoolModuleFilenameTemplate: isEnvProduction\r\n        ? info =>\r\n            path\r\n              .relative(paths.appSrcLib, info.absoluteResourcePath)\r\n              .replace(/\\\\/g, '/')\r\n        : isEnvDevelopment &&\r\n          (info => path.resolve(info.absoluteResourcePath).replace(/\\\\/g, '/')),\r\n      // Prevents conflicts when multiple Webpack runtimes (from different apps)\r\n      // are used on the same page.\r\n      jsonpFunction: `webpackJsonp${appPackageJson.name}`,\r\n    },\r\n    optimization: {\r\n      minimize: isEnvProduction,\r\n      minimizer: [\r\n        // This is only used in production mode\r\n        new TerserPlugin({\r\n          terserOptions: {\r\n            parse: {\r\n              // We want terser to parse ecma 8 code. However, we don't want it\r\n              // to apply any minification steps that turns valid ecma 5 code\r\n              // into invalid ecma 5 code. This is why the 'compress' and 'output'\r\n              // sections only apply transformations that are ecma 5 safe\r\n              // https://github.com/facebook/create-react-app/pull/4234\r\n              ecma: 8,\r\n            },\r\n            compress: {\r\n              ecma: 5,\r\n              warnings: false,\r\n              // Disabled because of an issue with Uglify breaking seemingly valid code:\r\n              // https://github.com/facebook/create-react-app/issues/2376\r\n              // Pending further investigation:\r\n              // https://github.com/mishoo/UglifyJS2/issues/2011\r\n              comparisons: false,\r\n              // Disabled because of an issue with Terser breaking valid code:\r\n              // https://github.com/facebook/create-react-app/issues/5250\r\n              // Pending further investigation:\r\n              // https://github.com/terser-js/terser/issues/120\r\n              inline: 2,\r\n            },\r\n            mangle: {\r\n              safari10: true,\r\n              keep_classnames: true,\r\n              keep_fnames: true,\r\n              module: true\r\n            },\r\n            output: {\r\n              ecma: 5,\r\n              comments: false,\r\n              // Turned on because emoji and regex is not minified properly using default\r\n              // https://github.com/facebook/create-react-app/issues/2488\r\n              ascii_only: true,\r\n            },\r\n          },\r\n          // Use multi-process parallel running to improve the build speed\r\n          // Default number of concurrent runs: os.cpus().length - 1\r\n          // Disabled on WSL (Windows Subsystem for Linux) due to an issue with Terser\r\n          // https://github.com/webpack-contrib/terser-webpack-plugin/issues/21\r\n          parallel: !isWsl,\r\n          // Enable file caching\r\n          cache: true,\r\n          sourceMap: shouldUseSourceMap,\r\n        }),\r\n        new webpack.BannerPlugin({ \r\n          banner: banner, \r\n          entryOnly: true \r\n        }),\r\n        new OptimizeCSSAssetsPlugin({\r\n          cssProcessorOptions: {\r\n            parser: safePostCssParser,\r\n            map: shouldUseSourceMap\r\n              ? {\r\n                  // `inline: false` forces the sourcemap to be output into a\r\n                  // separate file\r\n                  inline: false,\r\n                  // `annotation: true` appends the sourceMappingURL to the end of\r\n                  // the css file, helping the browser find the sourcemap\r\n                  annotation: true,\r\n                }\r\n              : false,\r\n          },\r\n        }),\r\n      ],\r\n      // Automatically split vendor and commons\r\n      // https://twitter.com/wSokra/status/969633336732905474\r\n      // https://medium.com/webpack/webpack-4-code-splitting-chunk-graph-and-the-splitchunks-optimization-be739a861366\r\n      splitChunks: {\r\n      //chunks: 'all',\r\n      cacheGroups: {\r\n        default: false,\r\n      }\r\n      },\r\n      // Keep the runtime chunk separated to enable long term caching\r\n      // https://twitter.com/wSokra/status/969679223278505985\r\n    runtimeChunk: false,\r\n    },\r\n    resolve: {\r\n      // This allows you to set a fallback for where Webpack should look for modules.\r\n      // We placed these paths second because we want `node_modules` to \"win\"\r\n      // if there are any conflicts. This matches Node resolution mechanism.\r\n      // https://github.com/facebook/create-react-app/issues/253\r\n      modules: ['node_modules', paths.appNodeModules].concat(\r\n        modules.additionalModulePaths || []\r\n      ),\r\n      // These are the reasonable defaults supported by the Node ecosystem.\r\n      // We also include JSX as a common component filename extension to support\r\n      // some tools, although we do not recommend using it, see:\r\n      // https://github.com/facebook/create-react-app/issues/290\r\n      // `web` extension prefixes have been added for better support\r\n      // for React Native Web.\r\n      extensions: paths.moduleFileExtensions\r\n        .map(ext => `.${ext}`)\r\n        .filter(ext => useTypeScript || !ext.includes('ts')),\r\n      alias: {\r\n        // Support React Native Web\r\n        // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/\r\n        'react-native': 'react-native-web',\r\n      },\r\n      plugins: [\r\n        // Adds support for installing with Plug'n'Play, leading to faster installs and adding\r\n        // guards against forgotten dependencies and such.\r\n        PnpWebpackPlugin,\r\n        // Prevents users from importing files from outside of src/ (or node_modules/).\r\n        // This often causes confusion because we only process files within src/ with babel.\r\n        // To fix this, we prevent you from importing files out of src/ -- if you'd like to,\r\n        // please link the files into your node_modules/ and let module-resolution kick in.\r\n        // Make sure your source files are compiled, as they will not be processed in any way.\r\n        new ModuleScopePlugin(paths.appSrc, [paths.appPackageJson]),\r\n      ],\r\n    },\r\n    resolveLoader: {\r\n      plugins: [\r\n        // Also related to Plug'n'Play, but this time it tells Webpack to load its loaders\r\n        // from the current package.\r\n        PnpWebpackPlugin.moduleLoader(module),\r\n\r\n      ],\r\n    },\r\n    module: {\r\n      strictExportPresence: true,\r\n      rules: [\r\n        // Disable require.ensure as it's not a standard language feature.\r\n        { parser: { requireEnsure: false } },\r\n\r\n        // First, run the linter.\r\n        // It's important to do this before Babel processes the JS.\r\n        {\r\n          test: /\\.(js|mjs|jsx|ts|tsx)$/,\r\n          enforce: 'pre',\r\n          use: [\r\n            {\r\n              options: {\r\n                formatter: require.resolve('react-dev-utils/eslintFormatter'),\r\n                eslintPath: require.resolve('eslint'),\r\n                resolvePluginsRelativeTo: __dirname,\r\n                \r\n              },\r\n              loader: require.resolve('eslint-loader'),\r\n            },\r\n          ],\r\n        include: paths.appSrcLib,\r\n        },\r\n        {\r\n          // \"oneOf\" will traverse all following loaders until one will\r\n          // match the requirements. When no loader matches it will fall\r\n          // back to the \"file\" loader at the end of the loader list.\r\n          oneOf: [\r\n            // \"url\" loader works like \"file\" loader except that it embeds assets\r\n            // smaller than specified limit in bytes as data URLs to avoid requests.\r\n            // A missing `test` is equivalent to a match.\r\n            {\r\n              test: [/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/],\r\n              loader: require.resolve('url-loader'),\r\n              options: {\r\n                limit: imageInlineSizeLimit,\r\n                name: 'static/media/[name].[hash:8].[ext]',\r\n              },\r\n            },\r\n            // Process application JS with Babel.\r\n            // The preset includes JSX, Flow, TypeScript, and some ESnext features.\r\n            {\r\n              test: /\\.(js|mjs|jsx|ts|tsx)$/,\r\n              include: paths.appSrcLib,\r\n              loader: require.resolve('babel-loader'),\r\n              options: {\r\n                customize: require.resolve(\r\n                  'babel-preset-react-app/webpack-overrides'\r\n                ),\r\n                \r\n                plugins: [\r\n                  [\r\n                    require.resolve('babel-plugin-named-asset-import'),\r\n                    {\r\n                      loaderMap: {\r\n                        svg: {\r\n                          ReactComponent: '@svgr/webpack?-prettier,-svgo,+ref![path]',\r\n                        },\r\n                      },\r\n                    },\r\n                  ],\r\n                ],\r\n                // This is a feature of `babel-loader` for webpack (not Babel itself).\r\n                // It enables caching results in ./node_modules/.cache/babel-loader/\r\n                // directory for faster rebuilds.\r\n                cacheDirectory: true,\r\n                cacheCompression: isEnvProduction,\r\n                compact: isEnvProduction,\r\n              },\r\n            },\r\n            // Process any JS outside of the app with Babel.\r\n            // Unlike the application JS, we only compile the standard ES features.\r\n            {\r\n              test: /\\.(js|mjs)$/,\r\n              exclude: /@babel(?:\\/|\\\\{1,2})runtime/,\r\n              loader: require.resolve('babel-loader'),\r\n              options: {\r\n                babelrc: false,\r\n                configFile: false,\r\n                compact: false,\r\n                presets: [\r\n                  [\r\n                    require.resolve('babel-preset-react-app/dependencies'),\r\n                    { helpers: true },\r\n                  ],\r\n                  \"@babel/preset-env\",\r\n                  \"@babel/preset-react\"\r\n                ],\r\n                plugins: [\r\n                  [\r\n                    \"@babel/plugin-proposal-class-properties\"\r\n                  ]\r\n                ],\r\n                cacheDirectory: true,\r\n                cacheCompression: isEnvProduction,\r\n                \r\n                // If an error happens in a package, it's possible to be\r\n                // because it was compiled. Thus, we don't want the browser\r\n                // debugger to show the original code. Instead, the code\r\n                // being evaluated would be much more helpful.\r\n                sourceMaps: false,\r\n              },\r\n            },\r\n            // \"postcss\" loader applies autoprefixer to our CSS.\r\n            // \"css\" loader resolves paths in CSS and adds assets as dependencies.\r\n            // \"style\" loader turns CSS into JS modules that inject <style> tags.\r\n            // In production, we use MiniCSSExtractPlugin to extract that CSS\r\n            // to a file, but in development \"style\" loader enables hot editing\r\n            // of CSS.\r\n            // By default we support CSS Modules with the extension .module.css\r\n            {\r\n              test: cssRegex,\r\n              exclude: cssModuleRegex,\r\n              use: getStyleLoaders({\r\n                importLoaders: 1,\r\n                sourceMap: isEnvProduction && shouldUseSourceMap,\r\n              }),\r\n              // Don't consider CSS imports dead code even if the\r\n              // containing package claims to have no side effects.\r\n              // Remove this when webpack adds a warning or an error for this.\r\n              // See https://github.com/webpack/webpack/issues/6571\r\n              sideEffects: true,\r\n            },\r\n            // Adds support for CSS Modules (https://github.com/css-modules/css-modules)\r\n            // using the extension .module.css\r\n            {\r\n              test: cssModuleRegex,\r\n              use: getStyleLoaders({\r\n                importLoaders: 1,\r\n                sourceMap: isEnvProduction && shouldUseSourceMap,\r\n                modules: true,\r\n                getLocalIdent: getCSSModuleLocalIdent,\r\n              }),\r\n            },\r\n            // Opt-in support for SASS (using .scss or .sass extensions).\r\n            // By default we support SASS Modules with the\r\n            // extensions .module.scss or .module.sass\r\n            {\r\n              test: sassRegex,\r\n              exclude: sassModuleRegex,\r\n              use: getStyleLoaders(\r\n                {\r\n                  importLoaders: 2,\r\n                  sourceMap: isEnvProduction && shouldUseSourceMap,\r\n                },\r\n                'sass-loader'\r\n              ),\r\n              // Don't consider CSS imports dead code even if the\r\n              // containing package claims to have no side effects.\r\n              // Remove this when webpack adds a warning or an error for this.\r\n              // See https://github.com/webpack/webpack/issues/6571\r\n              sideEffects: true,\r\n            },\r\n            // Adds support for CSS Modules, but using SASS\r\n            // using the extension .module.scss or .module.sass\r\n            {\r\n              test: sassModuleRegex,\r\n              use: getStyleLoaders(\r\n                {\r\n                  importLoaders: 2,\r\n                  sourceMap: isEnvProduction && shouldUseSourceMap,\r\n                  modules: true,\r\n                  getLocalIdent: getCSSModuleLocalIdent,\r\n                },\r\n                'sass-loader'\r\n              ),\r\n            },\r\n            // \"file\" loader makes sure those assets get served by WebpackDevServer.\r\n            // When you `import` an asset, you get its (virtual) filename.\r\n            // In production, they would get copied to the `build` folder.\r\n            // This loader doesn't use a \"test\" so it will catch all modules\r\n            // that fall through the other loaders.\r\n            {\r\n              loader: require.resolve('file-loader'),\r\n              // Exclude `js` files to keep \"css\" loader working as it injects\r\n              // its runtime that would otherwise be processed through \"file\" loader.\r\n              // Also exclude `html` and `json` extensions so they get processed\r\n              // by webpacks internal loaders.\r\n              exclude: [/\\.(js|mjs|jsx|ts|tsx)$/, /\\.html$/, /\\.json$/],\r\n              options: {\r\n                name: 'static/media/[name].[hash:8].[ext]',\r\n              },\r\n            },\r\n            // ** STOP ** Are you adding a new loader?\r\n            // Make sure to add the new loader(s) before the \"file\" loader.\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    plugins: [\r\n      new webpack.ProvidePlugin({\r\n        // $: \"jquery\",\r\n        // jQuer: 'jquery',\r\n        // 'window.jQuery': 'jquery',\r\n        // \"window.$\": \"jquery\"\r\n      }),\r\n      isEnvDevelopment &&\r\n      // Generates an `index.html` file with the <script> injected.\r\n      new HtmlWebpackPlugin(\r\n        Object.assign(\r\n          {},\r\n          {\r\n            inject: true,\r\n            template: paths.appHtml,\r\n          },\r\n          isEnvProduction\r\n            ? {\r\n                minify: {\r\n                  removeComments: true,\r\n                  collapseWhitespace: true,\r\n                  removeRedundantAttributes: true,\r\n                  useShortDoctype: true,\r\n                  removeEmptyAttributes: true,\r\n                  removeStyleLinkTypeAttributes: true,\r\n                  keepClosingSlash: true,\r\n                  minifyJS: true,\r\n                  minifyCSS: true,\r\n                  minifyURLs: true,\r\n                },\r\n              }\r\n            : undefined\r\n        )\r\n      ),\r\n      // Inlines the webpack runtime script. This script is too small to warrant\r\n      // a network request.\r\n      isEnvProduction &&\r\n        shouldInlineRuntimeChunk &&\r\n        new InlineChunkHtmlPlugin(HtmlWebpackPlugin, [/runtime~.+[.]js/]),\r\n      // Makes some environment variables available in index.html.\r\n      // The public URL is available as %PUBLIC_URL% in index.html, e.g.:\r\n      // <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\r\n      // In production, it will be an empty string unless you specify \"homepage\"\r\n      // in `package.json`, in which case it will be the pathname of that URL.\r\n      // In development, this will be an empty string.\r\n      new InterpolateHtmlPlugin(HtmlWebpackPlugin, env.raw),\r\n      // This gives some necessary context to module not found errors, such as\r\n      // the requesting resource.\r\n      new ModuleNotFoundPlugin(paths.appPath),\r\n      // Makes some environment variables available to the JS code, for example:\r\n      // if (process.env.NODE_ENV === 'production') { ... }. See `./env.js`.\r\n      // It is absolutely essential that NODE_ENV is set to production\r\n      // during a production build.\r\n      // Otherwise React will be compiled in the very slow development mode.\r\n      new webpack.DefinePlugin(env.stringified),\r\n      // This is necessary to emit hot updates (currently CSS only):\r\n      isEnvDevelopment && new webpack.HotModuleReplacementPlugin(),\r\n      // Watcher doesn't work well if you mistype casing in a path so we use\r\n      // a plugin that prints an error when you attempt to do this.\r\n      // See https://github.com/facebook/create-react-app/issues/240\r\n      isEnvDevelopment && new CaseSensitivePathsPlugin(),\r\n      // If you require a missing module and then `npm install` it, you still have\r\n      // to restart the development server for Webpack to discover it. This plugin\r\n      // makes the discovery automatic so you don't have to restart.\r\n      // See https://github.com/facebook/create-react-app/issues/186\r\n      isEnvDevelopment &&\r\n        new WatchMissingNodeModulesPlugin(paths.appNodeModules),\r\n      isEnvProduction &&\r\n        new MiniCssExtractPlugin({\r\n          // Options similar to the same options in webpackOptions.output\r\n          // both options are optional\r\n          filename: 'index.css',\r\n          chunkFilename: 'index.[contenthash:8].chunk.css',\r\n        }),\r\n      // Generate a manifest file which contains a mapping of all asset filenames\r\n      // to their corresponding output file so that tools can pick it up without\r\n      // having to parse `index.html`.\r\n    /*new ManifestPlugin({\r\n        fileName: 'asset-manifest.json',\r\n        publicPath: publicPath,\r\n        generate: (seed, files) => {\r\n          const manifestFiles = files.reduce(function(manifest, file) {\r\n            manifest[file.name] = file.path;\r\n            return manifest;\r\n          }, seed);\r\n\r\n          return {\r\n            files: manifestFiles,\r\n          };\r\n        },\r\n      }),*/\r\n      // Moment.js is an extremely popular library that bundles large locale files\r\n      // by default due to how Webpack interprets its code. This is a practical\r\n      // solution that requires the user to opt into importing specific locales.\r\n      // https://github.com/jmblog/how-to-optimize-momentjs-with-webpack\r\n      // You can remove this if you don't use Moment.js:\r\n      new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/),\r\n      // Generate a service worker script that will precache, and keep up to date,\r\n      // the HTML & assets that are part of the Webpack build.\r\n      /*isEnvProduction &&\r\n        new WorkboxWebpackPlugin.GenerateSW({\r\n          clientsClaim: true,\r\n          exclude: [/\\.map$/, /asset-manifest\\.json$/],\r\n          importWorkboxFrom: 'cdn',\r\n          navigateFallback: publicUrl + '/index.html',\r\n          navigateFallbackBlacklist: [\r\n            // Exclude URLs starting with /_, as they're likely an API call\r\n            new RegExp('^/_'),\r\n            // Exclude URLs containing a dot, as they're likely a resource in\r\n            // public/ and not a SPA route\r\n            new RegExp('/[^/]+\\\\.[^/]+$'),\r\n          ],\r\n        }),*/\r\n      // TypeScript type checking\r\n      useTypeScript &&\r\n        new ForkTsCheckerWebpackPlugin({\r\n          typescript: resolve.sync('typescript', {\r\n            basedir: paths.appNodeModules,\r\n          }),\r\n          async: isEnvDevelopment,\r\n          useTypescriptIncrementalApi: true,\r\n          checkSyntacticErrors: true,\r\n          resolveModuleNameModule: process.versions.pnp\r\n            ? `${__dirname}/pnpTs.js`\r\n            : undefined,\r\n          resolveTypeReferenceDirectiveModule: process.versions.pnp\r\n            ? `${__dirname}/pnpTs.js`\r\n            : undefined,\r\n          tsconfig: paths.appTsConfig,\r\n          reportFiles: [\r\n            '**',\r\n            '!**/__tests__/**',\r\n            '!**/?(*.)(spec|test).*',\r\n            '!**/src/setupProxy.*',\r\n            '!**/src/setupTests.*',\r\n          ],\r\n          watch: paths.appSrcLib,\r\n          silent: true,\r\n          // The formatter is invoked directly in WebpackDevServerUtils during development\r\n          formatter: isEnvProduction ? typescriptFormatter : undefined,\r\n        }),\r\n    ].filter(Boolean),\r\n    // Some libraries import Node modules but don't use them in the browser.\r\n    // Tell Webpack to provide empty mocks for them so importing them works.\r\n    node: {\r\n      module: 'empty',\r\n      dgram: 'empty',\r\n      dns: 'mock',\r\n      fs: 'empty',\r\n      http2: 'empty',\r\n      net: 'empty',\r\n      tls: 'empty',\r\n      child_process: 'empty',\r\n    },\r\n    // Turn off performance processing because we utilize\r\n    // our own hints via the FileSizeReporter\r\n    performance: false,\r\n  };\r\n};\r\n"]}